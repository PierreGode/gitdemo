send_to_teams:
  name: "Send AI Summary to Teams"
  runs-on: ubuntu-latest
  if: >
    github.event_name == 'push' &&
    (
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master'
    )
  steps:
    - name: Checkout Code (Optional)
      uses: actions/checkout@v3

    - name: Identify Merged PR
      id: find_pr
      run: |
        COMMIT_SHA="${{ github.sha }}"
        echo "Commit SHA: $COMMIT_SHA"

        # Call GitHub API to list any pull requests containing this commit
        PR_INFO=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

        echo "Raw PR info: $PR_INFO"

        # Extract the first PR number from the array
        PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

        if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
          echo "No PR found for commit $COMMIT_SHA."
          echo "pr_number=" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Found PR #$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        fi

    - name: Print PR Details
      run: |
        PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR number retrieved, skipping..."
          exit 0
        fi

        PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"
        echo "Merged PR: #${PR_NUMBER}"
        echo "PR Link : ${PR_LINK}"

    - name: Fetch AI Pull Request Summary Comment
      if: steps.find_pr.outputs.pr_number != ''
      id: fetch_ai_summary
      run: |
        PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
        echo "Fetching comments for PR #${PR_NUMBER}..."

        # Fetch issue comments (comments on the PR conversation)
        COMMENTS=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

        echo "Raw comments: $COMMENTS"

        # Extract the comment containing "AI Pull Request Summary"
        AI_SUMMARY_COMMENT=$(echo "$COMMENTS" | \
          jq -r '.[] | select(.body | contains("AI Pull Request Summary")) | .body')

        if [ -z "$AI_SUMMARY_COMMENT" ]; then
          echo "No comment containing 'AI Pull Request Summary' found."
          echo "ai_summary=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Found AI Pull Request Summary comment."

        # Extract the summary text after the keyword
        AI_SUMMARY=$(echo "$AI_SUMMARY_COMMENT" | sed -n '/\*\*AI Pull Request Summary:\*\*/, $p' | sed '1d')

        # Fallback if the format is different
        if [ -z "$AI_SUMMARY" ]; then
          AI_SUMMARY="$AI_SUMMARY_COMMENT"
        fi

        echo "Extracted AI Summary: $AI_SUMMARY"

        # Save the AI summary to output using GITHUB_OUTPUT
        echo "ai_summary<<EOF" >> $GITHUB_OUTPUT
        echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Print AI Pull Request Summary
      if: steps.fetch_ai_summary.outputs.ai_summary != ''
      run: |
        PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
        printf "AI Pull Request Summary for PR #%s:\n%s\n" "$PR_NUMBER" "${{ steps.fetch_ai_summary.outputs.ai_summary }}"

    - name: Send AI Summary to Teams
      if: steps.fetch_ai_summary.outputs.ai_summary != ''
      env:
        TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      run: |
        AI_SUMMARY="${{ steps.fetch_ai_summary.outputs.ai_summary }}"
        PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
        PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"

        PAYLOAD=$(jq -n \
          --arg title "AI Pull Request Summary for PR #$PR_NUMBER" \
          --arg text "$AI_SUMMARY\n\n[View PR]($PR_LINK)" \
          '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": $title,
            "title": $title,
            "text": $text
          }')

        # Send the payload to the Teams webhook
        curl -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          "$TEAMS_WEBHOOK_URL"

        echo "PR Summary sent to Microsoft Teams successfully."
