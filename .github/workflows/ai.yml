name: PR summary by AI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    name: PR Summary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "::set-output name=README::$README_CONTENT"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python - <<EOF
          import os
          import requests
          import json
          import re

          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          pr_number = event['pull_request']['number']
          pr_title = event['pull_request']['title']
          repo_full_name = event['repository']['full_name']
          pr_url = event['pull_request']['html_url']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')
          teams_webhook_url = os.environ.get('TEAMS_WEBHOOK_URL')

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3.diff',
          }
          diff_url = event['pull_request']['url'] + "/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          diff_text = ""
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', 'No changes')
              diff_text += f"File: {filename}\nPatch:\n"
              for line in patch.split('\\n'):
                  if line.startswith('+') and not line.startswith('+++'):
                      diff_text += f"Added: {line[1:]}\n"
                  elif line.startswith('-') and not line.startswith('---'):
                      diff_text += f"Removed: {line[1:]}\n"
                  else:
                      diff_text += f"{line}\n"

          summary_prompt = (
              f"Analyze the following Pull Request Diff and summarize the changes. Use the following README as a basic understanding of the repository and its purpose to give a more precise pull request summary. Provide a comprehensive analysis of the pull request. \\n\\n"
              f"**README Content:**\\n{readme_content}\\n\\n"
              f"**Pull Request Diff:**\\n{diff_text}\\n\\n"
              f"Please include the following in your summary:\\n"
              f"- Key files and components modified.\\n"
              f"- Main purpose of the changes (e.g., bug fixes, feature additions, optimizations).\\n"
              f"- Specific functionalities introduced, modified, or removed.\\n"
              f"  - Highlight lines added (marked with 'Added:') and lines removed (marked with 'Removed:').\\n"
              f"- Any potential implications or considerations (e.g., performance impacts, breaking changes, dependencies).\\n"
              f"Ensure the summary clearly states which version contains corrections or bug fixes."
          )

          ai_headers = {"Content-Type": "application/json", "Authorization": f"Bearer {openai_key}"}
          data_summary = {
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": summary_prompt}],
              "temperature": 0.7
          }
          summary_response = requests.post("https://api.openai.com/v1/chat/completions", headers=ai_headers, json=data_summary)
          summary_response.raise_for_status()
          summary = summary_response.json()['choices'][0]['message']['content'].strip()

          # Post summary as PR comment (unchanged format)
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          summary_comment = {
              "body": f"**AI Pull Request Summary:**\\n{summary}"
          }
          requests.post(comment_url, headers={'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}, json=summary_comment)

          print("PR Summary posted successfully.")

          # --- POST-PROCESSING FOR TEAMS ONLY ---
          # Remove Markdown heading symbols to avoid large heading sizes in Teams.
          summary_for_teams = re.sub(r'^(#{1,6})\s+', '', summary, flags=re.MULTILINE)

          # Prepare Enhanced Teams Payload (structure unchanged, but use summary_for_teams)
          teams_payload = {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "New AI PR Summary",
              "sections": [
                  {
                      "activityTitle": "**📝 AI-Generated PR Summary**",
                      "activitySubtitle": f"📂 Repository: **{repo_full_name}**",
                      "activityImage": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                      "facts": [
                          { "name": "🔖 Pull Request", "value": f"[{pr_title} (#{pr_number})]({pr_url})" },
                          { "name": "📅 Created By", "value": f"{event['pull_request']['user']['login']}" },
                          { "name": "📈 Changes", "value": f"{len(pr_files)} files modified" }
                      ],
                      "markdown": True
                  },
                  {
                      "title": "📄 **Summary**",
                      "text": f"{summary_for_teams}",
                      "markdown": True
                  },
                  {
                      "potentialAction": [
                          {
                              "@type": "OpenUri",
                              "name": "🔗 View on GitHub",
                              "targets": [
                                  { "os": "default", "uri": pr_url }
                              ]
                          }
                      ]
                  }
              ]
          }

          # Send Enhanced Teams Payload
          teams_headers = {"Content-Type": "application/json"}
          response = requests.post(teams_webhook_url, headers=teams_headers, json=teams_payload)
          response.raise_for_status()

          print("PR Summary sent to Microsoft Teams successfully.")
          EOF

  code_review:
    name: AI Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "::set-output name=README::$README_CONTENT"

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}
          
