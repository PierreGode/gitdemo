name: "PR Summary and Post-Merge Actions"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    if: github.event_name == 'pull_request'
    name: "PR Summary by AI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> $GITHUB_OUTPUT
          echo "$README_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

  code_review:
    if: github.event_name == 'pull_request'
    name: "AI Code Review"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> $GITHUB_OUTPUT
          echo "$README_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}

  post_merge:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    name: "Post-Merge PR Info with AI Summary"
    runs-on: ubuntu-latest
    steps:
      - name: Identify merged PR
        id: find_pr
        run: |
          # The commit that just landed on 'main'
          COMMIT_SHA="${{ github.sha }}"
          echo "Commit SHA: $COMMIT_SHA"

          # Call GitHub API to list any pull requests containing this commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github.groot-preview+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "Raw PR info: $PR_INFO"

          # Extract the first PR number from the array
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA."
            echo "pr_number=" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Print PR details
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number retrieved, skipping..."
            exit 0
          fi

          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"

          echo "Merged PR: #${PR_NUMBER}"
          echo "PR Link : ${PR_LINK}"

      - name: Fetch PR Comments
        if: steps.find_pr.outputs.pr_number != ''
        id: fetch_comments
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Fetching comments for PR #${PR_NUMBER}..."

          # Fetch issue comments (comments on the PR conversation)
          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          echo "Raw comments: $COMMENTS"

          # Check if there are any comments
          COMMENT_COUNT=$(echo "$COMMENTS" | jq 'length')
          echo "Number of comments: $COMMENT_COUNT"

          if [ "$COMMENT_COUNT" -eq 0 ]; then
            echo "No comments found for PR #${PR_NUMBER}."
            echo "ai_summary=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract the comment containing "AI Pull Request Summary"
          AI_SUMMARY_COMMENT=$(echo "$COMMENTS" | \
            jq -r '.[] | select(.body | contains("AI Pull Request Summary")) | .body')

          if [ -z "$AI_SUMMARY_COMMENT" ]; then
            echo "No comment containing 'AI Pull Request Summary' found."
            echo "ai_summary=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found AI Pull Request Summary comment."

          # Optionally, extract the summary text after the keyword
          # Assuming the format: "AI Pull Request Summary:\n\n<summary text>"
          AI_SUMMARY=$(echo "$AI_SUMMARY_COMMENT" | sed -n '/AI Pull Request Summary:/,/^$/p' | sed '1d' | sed '/^$/d')

          # Fallback if the format is different
          if [ -z "$AI_SUMMARY" ]; then
            AI_SUMMARY="$AI_SUMMARY_COMMENT"
          fi

          echo "Extracted AI Summary: $AI_SUMMARY"

          # Save the AI summary to output
          echo "ai_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post AI Summary to Teams
        if: steps.fetch_comments.outputs.ai_summary != ''
        run: |
          AI_SUMMARY="${{ steps.fetch_comments.outputs.ai_summary }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Sending AI Summary for PR #${PR_NUMBER} to Teams..."

          # Remove Markdown heading symbols to avoid large heading sizes in Teams
          SUMMARY_FOR_TEAMS=$(echo "$AI_SUMMARY" | sed 's/^#\+ //')

          # Prepare the Teams Payload
          TEAMS_PAYLOAD=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": "AI PR Summary",
            "sections": [
              {
                "activityTitle": "PR #${PR_NUMBER}",
                "activitySubtitle": "Repository: ${{ github.repository }}",
                "facts": [
                  { "name": "AI Summary", "value": "$SUMMARY_FOR_TEAMS" }
                ]
              }
            ]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" \
          -d "$TEAMS_PAYLOAD" ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Print AI Pull Request Summary
        if: steps.fetch_comments.outputs.ai_summary != ''
        run: |
          echo "${{ steps.fetch_comments.outputs.ai_summary }}"
