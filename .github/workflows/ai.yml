name: "PR AI Message and Post-Merge Teams Card"

on:
  pull_request:
    types: [opened, synchronize, reopened]  # or other PR event types you need
  push:
    branches:
      - main

jobs:
  # ---------------------------
  # 1) This job runs on PR events
  # ---------------------------
  handle_pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Generate or retrieve your AI message
        id: generate_ai_message
        run: |
          # Example: Suppose we just echo a placeholder.
          # In reality, you'd run your script or call an API to get the AI message.
          AI_MESSAGE="Hello from the AI! This is your PR-specific message."
          echo "AI_MESSAGE=$AI_MESSAGE" >> $GITHUB_OUTPUT

      - name: Post AI message to the PR as a comment
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          AI_MESSAGE="${{ steps.generate_ai_message.outputs.AI_MESSAGE }}"

          # Optional: add some markers so we can reliably parse it later.
          BODY="**AI Message**\n\n<!-- AI_MESSAGE_START -->\n${AI_MESSAGE}\n<!-- AI_MESSAGE_END -->"

          curl -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments \
            -d "$(jq -nc --arg body "$BODY" '{ body: $body }')"

  # ---------------------------
  # 2) This job runs on pushes to main (after merge)
  # ---------------------------
  post_merge_teams:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Identify which PR was merged
        id: find_pr
        run: |
          COMMIT_SHA="${{ github.sha }}"

          # Call GitHub API to find any PR(s) associated with this commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "PR_INFO: $PR_INFO"

          # Extract the first PR number from JSON (assuming only one). We'll store it in an output:
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found for commit $COMMIT_SHA"
            echo "pr_number=" >> $GITHUB_OUTPUT
          else
            echo "Found PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Retrieve AI message from the PR comments
        id: get_ai_message
        run: |
          if [ -z "${{ steps.find_pr.outputs.pr_number }}" ]; then
            echo "No PR number found; skipping."
            exit 0
          fi

          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          # Attempt to parse out AI message from the special markers
          # (<!-- AI_MESSAGE_START --> ... <!-- AI_MESSAGE_END -->)
          AI_MESSAGE=$(echo "$COMMENTS" | \
                       jq -r '.[] | select(.body | contains("AI_MESSAGE_START")) | .body' | \
                       sed -n '/AI_MESSAGE_START/,/AI_MESSAGE_END/p' | \
                       sed -e '1d' -e '$d' | xargs echo -n)

          echo "Parsed AI_MESSAGE: $AI_MESSAGE"
          # Save to an output for further steps
          echo "ai_message=$AI_MESSAGE" >> $GITHUB_OUTPUT

      - name: Post AI message to Teams
        run: |
          AI_MESSAGE="${{ steps.get_ai_message.outputs.ai_message }}"
          if [ -z "$AI_MESSAGE" ]; then
            echo "No AI message found. Skipping Teams notification."
            exit 0
          fi

          # Example: use a Teams webhook (or an action) to post the message.
          # Replace <YOUR_TEAMS_WEBHOOK> with your actual webhook secret in your repository secrets.
          curl -H "Content-Type: application/json" \
            -d "{
                  \"title\": \"Post-Merge AI Message\",
                  \"text\": \"${AI_MESSAGE}\"
                }" \
            "${{ secrets.YOUR_TEAMS_WEBHOOK }}"
