name: "PR Summary and Post-Merge Actions"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    if: github.event_name == 'pull_request'
    name: "PR Summary by AI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> $GITHUB_ENV
          echo "$README_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ env.README }}
        run: |
          python - <<EOF
          import os
          import requests
          import json
          import re

          # Load event data
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          # Extract necessary information
          pr_number = event['pull_request']['number']
          pr_title = event['pull_request']['title']
          repo_full_name = event['repository']['full_name']
          pr_url = event['pull_request']['html_url']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')

          # Fetch PR diffs
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3.diff',
          }
          diff_url = f"{event['pull_request']['url']}/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          # Process diffs
          diff_text = ""
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', 'No changes')
              diff_text += f"File: {filename}\nPatch:\n"
              for line in patch.split('\\n'):
                  if line.startswith('+') and not line.startswith('+++'):
                      diff_text += f"Added: {line[1:]}\n"
                  elif line.startswith('-') and not line.startswith('---'):
                      diff_text += f"Removed: {line[1:]}\n"
                  else:
                      diff_text += f"{line}\n"

          # Construct AI prompt
          summary_prompt = (
              f"Analyze the following Pull Request Diff and summarize the changes. Use the following README as a basic understanding of the repository and its purpose to give a more precise pull request summary. Provide a comprehensive analysis of the pull request.\n\n"
              f"**README Content:**\n{readme_content}\n\n"
              f"**Pull Request Diff:**\n{diff_text}\n\n"
              f"Please include the following in your summary:\n"
              f"- Key files and components modified.\n"
              f"- Main purpose of the changes (e.g., bug fixes, feature additions, optimizations).\n"
              f"- Specific functionalities introduced, modified, or removed.\n"
              f"  - Highlight lines added (marked with 'Added:') and lines removed (marked with 'Removed:').\n"
              f"- Any potential implications or considerations (e.g., performance impacts, breaking changes, dependencies).\n"
              f"Ensure the summary clearly states which version contains corrections or bug fixes."
          )

          # Call OpenAI API
          ai_headers = {"Content-Type": "application/json", "Authorization": f"Bearer {openai_key}"}
          data_summary = {
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": summary_prompt}],
              "temperature": 0.7
          }
          summary_response = requests.post("https://api.openai.com/v1/chat/completions", headers=ai_headers, json=data_summary)
          summary_response.raise_for_status()
          summary = summary_response.json()['choices'][0]['message']['content'].strip()

          # Post summary as PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          summary_comment = {
              "body": f"**AI Pull Request Summary:**\n{summary}"
          }
          requests.post(comment_url, headers={'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}, json=summary_comment)

          print("PR Summary posted successfully.")
          EOF

  code_review:
    if: github.event_name == 'pull_request'
    name: "AI Code Review"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> $GITHUB_ENV
          echo "$README_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ env.README }}

  post_merge:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    name: "Post-Merge PR Info with AI Summary"
    runs-on: ubuntu-latest
    steps:
      - name: Identify merged PR
        id: find_pr
        run: |
          # The commit that just landed on 'main'
          COMMIT_SHA="${{ github.sha }}"
          echo "Commit SHA: $COMMIT_SHA"

          # Call GitHub API to list any pull requests containing this commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github.groot-preview+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "Raw PR info: $PR_INFO"

          # Extract the first PR number from the array
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA."
            echo "pr_number=" >> $GITHUB_ENV
            exit 0
          else
            echo "Found PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV
          fi

      - name: Print PR details
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number retrieved, skipping..."
            exit 0
          fi

          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"

          echo "Merged PR: #${PR_NUMBER}"
          echo "PR Link : ${PR_LINK}"

      - name: Fetch PR Comments
        if: steps.find_pr.outputs.pr_number != ''
        id: fetch_comments
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Fetching comments for PR #${PR_NUMBER}..."

          # Fetch issue comments (comments on the PR conversation)
          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          echo "Raw comments: $COMMENTS"

          # Check if there are any comments
          COMMENT_COUNT=$(echo "$COMMENTS" | jq 'length')
          echo "Number of comments: $COMMENT_COUNT"

          if [ "$COMMENT_COUNT" -eq 0 ]; then
            echo "No comments found for PR #${PR_NUMBER}."
            echo "ai_summary=" >> $GITHUB_ENV
            exit 0
          fi

          # Extract the comment containing "AI Pull Request Summary"
          AI_SUMMARY_COMMENT=$(echo "$COMMENTS" | \
            jq -r '.[] | select(.body | contains("AI Pull Request Summary")) | .body')

          if [ -z "$AI_SUMMARY_COMMENT" ]; then
            echo "No comment containing 'AI Pull Request Summary' found."
            echo "ai_summary=" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found AI Pull Request Summary comment."

          # Optionally, extract the summary text after the keyword
          # Assuming the format: "AI Pull Request Summary:\n\n<summary text>"
          AI_SUMMARY=$(echo "$AI_SUMMARY_COMMENT" | sed -n '/AI Pull Request Summary:/,/^$/p' | sed '1d' | sed '/^$/d')

          # Fallback if the format is different
          if [ -z "$AI_SUMMARY" ]; then
            AI_SUMMARY="$AI_SUMMARY_COMMENT"
          fi

          echo "Extracted AI Summary: $AI_SUMMARY"

          # Save the AI summary to output
          echo "ai_summary<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post AI Summary to Teams
        if: steps.fetch_comments.outputs.ai_summary != ''
        run: |
          AI_SUMMARY="${{ steps.fetch_comments.outputs.ai_summary }}"
          echo "Posting AI summary to Teams..."

          # Remove Markdown heading symbols to avoid large heading sizes in Teams.
          summary_for_teams=$(echo "$AI_SUMMARY" | sed 's/^#\+ //g')

          # Prepare Enhanced Teams Payload
          teams_payload=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": "New AI PR Summary",
            "sections": [
              {
                "activityTitle": "**📝 AI-Generated PR Summary**",
                "activitySubtitle": "📂 Repository: **${{ github.repository }}**",
                "activityImage": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "facts": [
                  { "name": "🔖 Pull Request", "value": "[${{ steps.find_pr.outputs.pr_number }}]($PR_LINK)" },
                  { "name": "📅 Created By", "value": "${{ github.actor }}" },
                  { "name": "📈 Changes", "value": "AI-generated PR Summary" }
                ],
                "markdown": true
              },
              {
                "title": "📄 **Summary**",
                "text": "$summary_for_teams",
                "markdown": true
              }
            ]
          }
          EOF
          )

          # Send Enhanced Teams Payload
          teams_headers="Content-Type: application/json"
          response=$(curl -s -X POST "$TEAMS_WEBHOOK_URL" -H "$teams_headers" -d "$teams_payload")
          echo "PR Summary sent to Microsoft Teams successfully."
