name: "PR Summary by AI"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    name: "PR Summary"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README=$README_CONTENT" >> $GITHUB_OUTPUT

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
        run: |
          python - <<EOF
          import os
          import requests
          import json

          # Load GitHub event data
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          # Extract necessary information
          pr_number = event['pull_request']['number']
          pr_title = event['pull_request']['title']
          repo_full_name = event['repository']['full_name']
          pr_url = event['pull_request']['html_url']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')

          # Fetch pull request files
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3.diff',
          }
          diff_url = event['pull_request']['url'] + "/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          # Construct diff text
          diff_text = ""
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', 'No changes')
              diff_text += f"File: {filename}\nPatch:\n"
              for line in patch.split('\\n'):
                  if line.startswith('+') and not line.startswith('+++'):
                      diff_text += f"Added: {line[1:]}\n"
                  elif line.startswith('-') and not line.startswith('---'):
                      diff_text += f"Removed: {line[1:]}\n"
                  else:
                      diff_text += f"{line}\n"

          # Define the prompt for OpenAI
          summary_prompt = (
              f"Analyze the following Pull Request Diff and summarize the changes. Use the following README as a basic understanding of the repository and its purpose to give a more precise pull request summary. Provide a comprehensive analysis of the pull request. \\n\\n"
              f"**README Content:**\\n{readme_content}\\n\\n"
              f"**Pull Request Diff:**\\n{diff_text}\\n\\n"
              f"Please include the following in your summary:\\n"
              f"- Key files and components modified.\\n"
              f"- Main purpose of the changes (e.g., bug fixes, feature additions, optimizations).\\n"
              f"- Specific functionalities introduced, modified, or removed.\\n"
              f"  - Highlight lines added (marked with 'Added:') and lines removed (marked with 'Removed:').\\n"
              f"- Any potential implications or considerations (e.g., performance impacts, breaking changes, dependencies).\\n"
              f"Ensure the summary clearly states which version contains corrections or bug fixes."
          )

          # Prepare OpenAI API request
          ai_headers = {"Content-Type": "application/json", "Authorization": f"Bearer {openai_key}"}
          data_summary = {
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": summary_prompt}],
              "temperature": 0.7,
              "max_tokens": 1500  # Adjust as necessary
          }

          # Make the API request to OpenAI
          summary_response = requests.post("https://api.openai.com/v1/chat/completions", headers=ai_headers, json=data_summary)
          summary_response.raise_for_status()
          summary = summary_response.json()['choices'][0]['message']['content'].strip()

          # Post summary as a PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          summary_comment = {
              "body": f"**AI Pull Request Summary:**\n{summary}"
          }
          requests.post(comment_url, headers={'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}, json=summary_comment)

          print("PR Summary posted successfully.")
          EOF

  send_to_teams:
    name: "Send AI Summary to Teams"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout Code (Optional)
        uses: actions/checkout@v3

      - name: Identify Merged PR and Fetch Details
        id: find_pr
        run: |
          COMMIT_SHA="${{ github.sha }}"
          echo "Commit SHA: $COMMIT_SHA"

          # Fetch the pull requests associated with the commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "Raw PR info: $PR_INFO"

          # Extract the first PR number from the array
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA."
            echo "pr_number=" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

          # Fetch PR details
          PR_DETAILS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")

          echo "Raw PR details: $PR_DETAILS"

          # Extract required details
          PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
          PR_CREATOR=$(echo "$PR_DETAILS" | jq -r '.user.login')
          PR_URL=$(echo "$PR_DETAILS" | jq -r '.html_url')
          CHANGE_COUNT=$(echo "$PR_DETAILS" | jq -r '.changed_files')

          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_creator=$PR_CREATOR" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "change_count=$CHANGE_COUNT" >> $GITHUB_OUTPUT

      - name: Verify PR Details
        run: |
          echo "PR Number: ${{ steps.find_pr.outputs.pr_number }}"
          echo "PR Title: ${{ steps.find_pr.outputs.pr_title }}"
          echo "PR Creator: ${{ steps.find_pr.outputs.pr_creator }}"
          echo "PR URL: ${{ steps.find_pr.outputs.pr_url }}"
          echo "Change Count: ${{ steps.find_pr.outputs.change_count }}"

      - name: Fetch AI Pull Request Summary Comment
        if: steps.find_pr.outputs.pr_number != ''
        id: fetch_ai_summary
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Fetching comments for PR #${PR_NUMBER}..."

          # Fetch issue comments (comments on the PR conversation)
          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          echo "Raw comments: $COMMENTS"

          # Extract the comment containing "AI Pull Request Summary"
          AI_SUMMARY_COMMENT=$(echo "$COMMENTS" | \
            jq -r '.[] | select(.body | contains("AI Pull Request Summary")) | .body')

          if [ -z "$AI_SUMMARY_COMMENT" ]; then
            echo "No comment containing 'AI Pull Request Summary' found."
            echo "ai_summary=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found AI Pull Request Summary comment."

          # Extract the summary text after the keyword using awk
          AI_SUMMARY=$(echo "$AI_SUMMARY_COMMENT" | awk '/\*\*AI Pull Request Summary:\*\*/ {flag=1; next} flag {print}')

          # Remove any leading/trailing empty lines
          AI_SUMMARY=$(echo "$AI_SUMMARY" | sed '/^$/d')

          # Validate summary length
          MAX_LENGTH=65535  # GitHub's approximate comment limit
          if [ ${#AI_SUMMARY} -gt $MAX_LENGTH ]; then
            echo "AI summary exceeds GitHub's comment size limit. Truncating..."
            AI_SUMMARY=$(echo "$AI_SUMMARY" | head -c $MAX_LENGTH)
          fi

          echo "Extracted AI Summary Length: ${#AI_SUMMARY}"
          echo "Extracted AI Summary: $AI_SUMMARY"

          # Save the AI summary to output
          echo "ai_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print AI Pull Request Summary
        if: steps.fetch_ai_summary.outputs.ai_summary != ''
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "AI Pull Request Summary for PR #${PR_NUMBER}:"
          echo "${{ steps.fetch_ai_summary.outputs.ai_summary }}"

      - name: Send AI Summary to Teams
        if: steps.fetch_ai_summary.outputs.ai_summary != ''
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          AI_SUMMARY="${{ steps.fetch_ai_summary.outputs.ai_summary }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          PR_TITLE="${{ steps.find_pr.outputs.pr_title }}"
          PR_CREATOR="${{ steps.find_pr.outputs.pr_creator }}"
          PR_URL="${{ steps.find_pr.outputs.pr_url }}"
          CHANGE_COUNT="${{ steps.find_pr.outputs.change_count }}"
          REPO_FULL_NAME="${{ github.repository }}"

          # Construct the Teams MessageCard payload using jq
          PAYLOAD=$(jq -n \
            --arg title "📝 AI-Generated PR Summary" \
            --arg repo "$REPO_FULL_NAME" \
            --arg pr_title "$PR_TITLE" \
            --arg pr_number "$PR_NUMBER" \
            --arg pr_url "$PR_URL" \
            --arg pr_creator "$PR_CREATOR" \
            --arg change_count "$CHANGE_COUNT" \
            --arg summary "$AI_SUMMARY" \
            '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "New AI PR Summary",
              "sections": [
                {
                  "activityTitle": "**📝 AI-Generated PR Summary**",
                  "activitySubtitle": "📂 Repository: **\($repo)**",
                  "activityImage": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "facts": [
                    { "name": "🔖 Pull Request", "value": "[\($pr_title) (#\($pr_number))](\($pr_url))" },
                    { "name": "📅 Created By", "value": "\($pr_creator)" },
                    { "name": "📈 Changes", "value": "\($change_count) files modified" }
                  ],
                  "markdown": true
                },
                {
                  "title": "📄 **Summary**",
                  "text": "\($summary)",
                  "markdown": true
                },
                {
                  "potentialAction": [
                    {
                      "@type": "OpenUri",
                      "name": "🔗 View on GitHub",
                      "targets": [
                        { "os": "default", "uri": "\($pr_url)" }
                      ]
                    }
                  ]
                }
              ]
            }')

          echo "Constructed Teams Payload: $PAYLOAD"

          # Send the payload to the Teams webhook
          curl -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$TEAMS_WEBHOOK_URL"

          echo "PR Summary sent to Microsoft Teams successfully."

  code_review:
    name: "AI Code Review"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "README=$README_CONTENT" >> $GITHUB_OUTPUT

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}
