name: "PR Summary by AI"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    name: "PR Summary"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README=${README_CONTENT}" >> $GITHUB_OUTPUT

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
        run: |
          python - <<EOF
          import os
          import requests
          import json

          # Load GitHub event data
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          # Extract PR details
          pr_number = event['pull_request']['number']
          pr_title = event['pull_request']['title']
          pr_creator = event['pull_request']['user']['login']
          repo_full_name = event['repository']['full_name']
          pr_url = event['pull_request']['html_url']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')

          # Fetch PR diff
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3.diff',
          }
          diff_url = event['pull_request']['url'] + "/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          diff_text = ""
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', 'No changes')
              diff_text += f"File: {filename}\nPatch:\n"
              for line in patch.split('\\n'):
                  if line.startswith('+') and not line.startswith('+++'):
                      diff_text += f"Added: {line[1:]}\n"
                  elif line.startswith('-') and not line.startswith('---'):
                      diff_text += f"Removed: {line[1:]}\n"
                  else:
                      diff_text += f"{line}\n"

          # Construct AI prompt
          summary_prompt = (
              f"Analyze the following Pull Request Diff and provide a concise summary of the changes. Use the following README as a reference to understand the repository's purpose. Your summary should include:\n"
              f"- Key files and components modified.\n"
              f"- Main purpose of the changes (e.g., bug fixes, feature additions).\n"
              f"- Specific functionalities introduced, modified, or removed.\n"
              f"Keep the summary under 500 words.\n\n"
              f"**README Content:**\n{readme_content}\n\n"
              f"**Pull Request Diff:**\n{diff_text}\n\n"
          )

          # Configure OpenAI API request
          ai_headers = {
              "Content-Type": "application/json",
              "Authorization": f"Bearer {openai_key}"
          }
          data_summary = {
              "model": "gpt-4",
              "messages": [{"role": "user", "content": summary_prompt}],
              "temperature": 0.7,
              "max_tokens": 750  # Adjust as needed to stay within GitHub's comment limits
          }

          # Send request to OpenAI API
          summary_response = requests.post("https://api.openai.com/v1/chat/completions", headers=ai_headers, json=data_summary)
          summary_response.raise_for_status()
          summary = summary_response.json()['choices'][0]['message']['content'].strip()

          # Post summary as a PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          summary_comment = {
              "body": f"**AI Pull Request Summary:**\n{summary}"
          }
          post_response = requests.post(comment_url, headers={
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }, json=summary_comment)
          post_response.raise_for_status()

          print("PR Summary posted successfully.")
          EOF

  send_to_teams:
    name: "Send AI Summary to Teams"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout Code (Optional)
        uses: actions/checkout@v3

      - name: Identify Merged PR
        id: find_pr
        run: |
          COMMIT_SHA="${{ github.sha }}"
          echo "Commit SHA: $COMMIT_SHA"

          # Call GitHub API to list any pull requests containing this commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "Raw PR info: $PR_INFO"

          # Extract the first PR number from the array
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA."
            echo "pr_number=" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Print PR Details
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number retrieved, skipping..."
            exit 0
          fi

          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"
          echo "Merged PR: #${PR_NUMBER}"
          echo "PR Link : ${PR_LINK}"

      - name: Fetch AI Pull Request Summary Comment
        if: steps.find_pr.outputs.pr_number != ''
        id: fetch_ai_summary
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Fetching comments for PR #${PR_NUMBER}..."

          # Fetch issue comments (comments on the PR conversation)
          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          echo "Raw comments: $COMMENTS"

          # Extract the comment containing "AI Pull Request Summary"
          AI_SUMMARY_COMMENT=$(echo "$COMMENTS" | \
            jq -r '.[] | select(.body | contains("AI Pull Request Summary")) | .body')

          if [ -z "$AI_SUMMARY_COMMENT" ]; then
            echo "No comment containing 'AI Pull Request Summary' found."
            echo "ai_summary=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found AI Pull Request Summary comment."

          # Extract the summary text after the keyword using awk
          AI_SUMMARY=$(echo "$AI_SUMMARY_COMMENT" | awk '/\*\*AI Pull Request Summary:\*\*/ {flag=1; next} flag {print}')

          # Remove any leading/trailing empty lines
          AI_SUMMARY=$(echo "$AI_SUMMARY" | sed '/^$/d')

          # Validate summary length
          MAX_LENGTH=65535  # GitHub's approximate comment limit
          SUMMARY_LENGTH=${#AI_SUMMARY}
          echo "Extracted AI Summary Length: $SUMMARY_LENGTH"

          if [ $SUMMARY_LENGTH -gt $MAX_LENGTH ]; then
            echo "AI summary exceeds GitHub's comment size limit. Truncating..."
            AI_SUMMARY=$(echo "$AI_SUMMARY" | head -c $MAX_LENGTH)
          fi

          echo "Extracted AI Summary: $AI_SUMMARY"

          # Save the AI summary to output
          echo "ai_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print AI Pull Request Summary
        if: steps.fetch_ai_summary.outputs.ai_summary != ''
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "AI Pull Request Summary for PR #${PR_NUMBER}:"
          echo "${{ steps.fetch_ai_summary.outputs.ai_summary }}"

      - name: Send AI Summary to Teams
        if: steps.fetch_ai_summary.outputs.ai_summary != ''
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          # Assign variables
          AI_SUMMARY="${{ steps.fetch_ai_summary.outputs.ai_summary }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}}"
          
          # Fetch PR details
          PR_DETAILS=$(curl -s -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")

          PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
          PR_CREATOR=$(echo "$PR_DETAILS" | jq -r '.user.login')
          CHANGE_COUNT=$(echo "$PR_DETAILS" | jq -r '.changed_files')

          # Construct Microsoft Teams payload
          PAYLOAD=$(jq -n \
            --arg title "üìù AI-Generated PR Summary for PR #$PR_NUMBER" \
            --arg repository "üìÇ Repository: ${{ github.repository }}" \
            --arg pr "üîñ Pull Request: $PR_TITLE (#$PR_NUMBER)" \
            --arg creator "üìÖ Created By: $PR_CREATOR" \
            --arg changes "üìà Changes: $CHANGE_COUNT files modified" \
            --arg summary "üìÑ Summary:\n$AI_SUMMARY" \
            --arg pr_link "[View PR]($PR_LINK)" \
            '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": $title,
              "title": $title,
              "text": "\($repository)\n\($pr)\n\($creator)\n\($changes)\n\($summary)\n\n\($pr_link)"
            }')

          # Send the payload to the Teams webhook
          curl -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$TEAMS_WEBHOOK_URL"

          echo "PR Summary sent to Microsoft Teams successfully."

  code_review:
    name: "AI Code Review"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "README=${README_CONTENT}" >> $GITHUB_OUTPUT

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}
