name: "PR Summary by AI"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ##################################################################
  # 1) Generate and post AI summary on every pull_request event
  ##################################################################
  pr_summary:
    name: "PR Summary"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "::set-output name=README::$README_CONTENT"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
        run: |
          python - <<EOF
          import os
          import requests
          import json

          # Load event data
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          # Extract PR info
          pr_number = event['pull_request']['number']
          pr_title = event['pull_request']['title']
          repo_full_name = event['repository']['full_name']
          pr_url = event['pull_request']['html_url']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')

          # Get diff data
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3.diff',
          }
          diff_url = event['pull_request']['url'] + "/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          diff_text = ""
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', 'No changes')
              diff_text += f"File: {filename}\\nPatch:\\n"
              for line in patch.split('\\n'):
                  if line.startswith('+') and not line.startswith('+++'):
                      diff_text += f"Added: {line[1:]}\\n"
                  elif line.startswith('-') and not line.startswith('---'):
                      diff_text += f"Removed: {line[1:]}\\n"
                  else:
                      diff_text += f"{line}\\n"

          # Construct the prompt for OpenAI
          summary_prompt = (
              "Analyze the following Pull Request Diff and summarize the changes. "
              "Use the following README as a basic understanding of the repository and its purpose "
              "to give a more precise pull request summary. Provide a comprehensive analysis of the pull request.\\n\\n"
              f"**README Content:**\\n{readme_content}\\n\\n"
              f"**Pull Request Diff:**\\n{diff_text}\\n\\n"
              "Please include the following in your summary:\\n"
              "- Key files and components modified.\\n"
              "- Main purpose of the changes (e.g., bug fixes, feature additions, optimizations).\\n"
              "- Specific functionalities introduced, modified, or removed.\\n"
              "  - Highlight lines added (marked with 'Added:') and lines removed (marked with 'Removed:').\\n"
              "- Any potential implications or considerations (e.g., performance impacts, breaking changes, dependencies).\\n"
              "Ensure the summary clearly states which version contains corrections or bug fixes."
          )

          # Call OpenAI
          ai_headers = {
              "Content-Type": "application/json",
              "Authorization": f"Bearer {openai_key}"
          }
          data_summary = {
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": summary_prompt}],
              "temperature": 0.7
          }
          summary_response = requests.post(
              "https://api.openai.com/v1/chat/completions",
              headers=ai_headers,
              json=data_summary
          )
          summary_response.raise_for_status()
          summary = summary_response.json()['choices'][0]['message']['content'].strip()

          # Post summary as PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          summary_comment = {
              "body": f"**AI Pull Request Summary:**\\n{summary}"
          }
          resp = requests.post(
              comment_url,
              headers={'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'},
              json=summary_comment
          )
          resp.raise_for_status()

          print("PR Summary posted successfully.")
          EOF

  ##################################################################
  # 2) After merging to main/master, fetch summary + send to Teams
  ##################################################################
  send_to_teams:
    name: "Send AI Summary to Teams"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    steps:
      - name: Checkout Code (Optional)
        uses: actions/checkout@v3

      - name: Identify Merged PR
        id: find_pr
        run: |
          COMMIT_SHA="${{ github.sha }}"
          echo "Commit SHA: $COMMIT_SHA"

          # GitHub API: find PR(s) containing this commit
          PR_INFO=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls")

          echo "Raw PR info: $PR_INFO"

          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.[0].number // empty')

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA."
            echo "pr_number=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found PR #$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Print PR Details
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number retrieved; skipping."
            exit 0
          fi

          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"
          echo "Merged PR: #${PR_NUMBER}"
          echo "PR Link: ${PR_LINK}"

      - name: Fetch AI Pull Request Summary Comment
        if: ${{ steps.find_pr.outputs.pr_number != '' }}
        id: fetch_ai_summary
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "Fetching comments for PR #${PR_NUMBER}..."

          COMMENTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.G_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          echo "Raw comments: $COMMENTS"

          AI_SUMMARY=$(python3 -c "
import re
import json

comments_json = '''$COMMENTS'''
comments = json.loads(comments_json)

summary_comment = ''
for c in comments:
    if 'AI Pull Request Summary' in c['body']:
        summary_comment = c['body']
        break

if summary_comment:
    # Regex: capture everything after '**AI Pull Request Summary:**'
    match = re.search(r'\\*\\*AI Pull Request Summary:\\*\\*[:]?\\s*(.*)', summary_comment, re.DOTALL)
    if match:
        print(match.group(1).strip())
    else:
        print(summary_comment)
else:
    print('')
")

          if [ -z "$AI_SUMMARY" ]; then
            echo "No AI Pull Request Summary found."
            echo "ai_summary=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found AI Pull Request Summary comment."
          echo "Extracted AI Summary: $AI_SUMMARY"

          echo "ai_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print AI Pull Request Summary
        if: ${{ steps.fetch_ai_summary.outputs.ai_summary != '' }}
        run: |
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "AI Pull Request Summary for PR #${PR_NUMBER}:"
          echo "${{ steps.fetch_ai_summary.outputs.ai_summary }}"

      - name: Send AI Summary to Teams
        if: ${{ steps.fetch_ai_summary.outputs.ai_summary != '' }}
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          AI_SUMMARY="${{ steps.fetch_ai_summary.outputs.ai_summary }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          PR_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"

          PAYLOAD=$(jq -n \
            --arg title "AI Pull Request Summary for PR #$PR_NUMBER" \
            --arg text "$AI_SUMMARY\n\n[View PR]($PR_LINK)" \
            '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": $title,
              "title": $title,
              "text": $text
            }')

          echo "Sending summary to Teams..."
          curl -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$TEAMS_WEBHOOK_URL"

          echo "PR Summary sent to Microsoft Teams successfully."

  ##################################################################
  # 3) AI Code Review job, triggered on pull_request
  ##################################################################
  code_review:
    name: "AI Code Review"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme_review
        run: |
          README_CONTENT=$(cat README.md)
          echo "::set-output name=README::$README_CONTENT"

      - name: AI Code Review
        uses: PierreGode/GPTcode-reviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4o-mini"
          exclude: "**/*.json,**/*.md"
          additional_context: ${{ steps.read_readme_review.outputs.README }}
